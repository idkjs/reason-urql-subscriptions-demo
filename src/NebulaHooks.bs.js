// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as $$Array from "bs-platform/lib/es6/array.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Js_exn from "bs-platform/lib/es6/js_exn.js";
import * as Js_dict from "bs-platform/lib/es6/js_dict.js";
import * as Js_json from "bs-platform/lib/es6/js_json.js";
import * as AppStyles from "./AppStyles.bs.js";
import * as Js_option from "bs-platform/lib/es6/js_option.js";
import * as Belt_Array from "bs-platform/lib/es6/belt_Array.js";
import * as ReasonUrql from "reason-urql/src/ReasonUrql.bs.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";
import * as HandleError from "./HandleError.bs.js";

var ppx_printed_query = "subscription subscribeNebula  {\nnewNebula  {\nid  \nmessage  \n}\n\n}\n";

function parse(value) {
  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
  var match = Js_dict.get(value$1, "newNebula");
  var tmp;
  if (match !== undefined) {
    var value$2 = Js_option.getExn(Js_json.decodeObject(Caml_option.valFromOption(match)));
    var match$1 = Js_dict.get(value$2, "id");
    var tmp$1;
    if (match$1 !== undefined) {
      var value$3 = Caml_option.valFromOption(match$1);
      var match$2 = Js_json.decodeString(value$3);
      tmp$1 = match$2 !== undefined ? match$2 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$3));
    } else {
      tmp$1 = Js_exn.raiseError("graphql_ppx: Field id on type Nebula is missing");
    }
    var match$3 = Js_dict.get(value$2, "message");
    var tmp$2;
    if (match$3 !== undefined) {
      var value$4 = Caml_option.valFromOption(match$3);
      var match$4 = Js_json.decodeString(value$4);
      tmp$2 = match$4 !== undefined ? match$4 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$4));
    } else {
      tmp$2 = Js_exn.raiseError("graphql_ppx: Field message on type Nebula is missing");
    }
    tmp = {
      id: tmp$1,
      message: tmp$2
    };
  } else {
    tmp = Js_exn.raiseError("graphql_ppx: Field newNebula on type Subscription is missing");
  }
  return {
          newNebula: tmp
        };
}

function make(param) {
  return {
          query: ppx_printed_query,
          variables: null,
          parse: parse
        };
}

function makeWithVariables(param) {
  return {
          query: ppx_printed_query,
          variables: null,
          parse: parse
        };
}

function makeVariables(param) {
  return null;
}

function definition_002(graphql_ppx_use_json_variables_fn) {
  return 0;
}

var definition = /* tuple */[
  parse,
  ppx_printed_query,
  definition_002
];

function ret_type(f) {
  return { };
}

var MT_Ret = { };

var SubscribeNewNebula = {
  ppx_printed_query: ppx_printed_query,
  query: ppx_printed_query,
  parse: parse,
  make: make,
  makeWithVariables: makeWithVariables,
  makeVariables: makeVariables,
  definition: definition,
  ret_type: ret_type,
  MT_Ret: MT_Ret
};

function handler(prevSubscriptions, subscription) {
  if (prevSubscriptions !== undefined) {
    return $$Array.append(prevSubscriptions, /* array */[subscription]);
  } else {
    return /* array */[subscription];
  }
}

function mapToMessage(newNebulaJs) {
  return newNebulaJs.newNebula.message;
}

function NebulaHooks(Props) {
  var match = Curry._4(ReasonUrql.Hooks.useSubscription, make(/* () */0), /* Handler */[handler], undefined, /* () */0);
  var response = match.response;
  if (typeof response === "number") {
    if (response === /* Fetching */0) {
      return React.createElement("text", undefined, "Loading");
    } else {
      return React.createElement("text", undefined, "Not Found");
    }
  } else if (response.tag) {
    return React.createElement(HandleError.make, {
                e: response[0]
              });
  } else {
    var messages = Belt_Array.map(Belt_Array.keepMap(response[0], (function (item) {
                return Caml_option.some(item);
              })), mapToMessage);
    return $$Array.mapi((function (index, m) {
                  return React.createElement("div", {
                              className: AppStyles.dexContainer
                            }, React.createElement("div", {
                                  key: String(index),
                                  className: AppStyles.dex
                                }, React.createElement("h1", {
                                      className: AppStyles.dexTitle
                                    }, m)));
                }), messages);
  }
}

var make$1 = NebulaHooks;

export {
  SubscribeNewNebula ,
  handler ,
  mapToMessage ,
  make$1 as make,
  
}
/* react Not a pure module */
