// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as $$Array from "bs-platform/lib/es6/array.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Js_exn from "bs-platform/lib/es6/js_exn.js";
import * as Js_dict from "bs-platform/lib/es6/js_dict.js";
import * as Js_json from "bs-platform/lib/es6/js_json.js";
import * as Js_option from "bs-platform/lib/es6/js_option.js";
import * as Caml_array from "bs-platform/lib/es6/caml_array.js";
import * as ReasonUrql from "./reason-urql/ReasonUrql.bs.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";

var ppx_printed_query = "subscription subscribeNumbers  {\nnewNumber  \n}\n";

function parse(value) {
  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
  var match = Js_dict.get(value$1, "newNumber");
  var tmp;
  if (match !== undefined) {
    var value$2 = Caml_option.valFromOption(match);
    var match$1 = Js_json.decodeNumber(value$2);
    tmp = String(match$1 !== undefined ? match$1 | 0 : Js_exn.raiseError("graphql_ppx: Expected int, got " + JSON.stringify(value$2)));
  } else {
    tmp = Js_exn.raiseError("graphql_ppx: Field newNumber on type Subscription is missing");
  }
  return {
          newNumber: tmp
        };
}

function make(param) {
  return {
          query: ppx_printed_query,
          variables: null,
          parse: parse
        };
}

function makeWithVariables(param) {
  return {
          query: ppx_printed_query,
          variables: null,
          parse: parse
        };
}

function makeVariables(param) {
  return null;
}

function definition_002(graphql_ppx_use_json_variables_fn) {
  return 0;
}

var definition = /* tuple */[
  parse,
  ppx_printed_query,
  definition_002
];

function ret_type(f) {
  return { };
}

var MT_Ret = { };

var SubscribeRandomInt = {
  ppx_printed_query: ppx_printed_query,
  query: ppx_printed_query,
  parse: parse,
  make: make,
  makeWithVariables: makeWithVariables,
  makeVariables: makeVariables,
  definition: definition,
  ret_type: ret_type,
  MT_Ret: MT_Ret
};

function handler(prevSubscriptions, subscription) {
  if (prevSubscriptions !== undefined) {
    return $$Array.append(prevSubscriptions, /* array */[subscription]);
  } else {
    return /* array */[subscription];
  }
}

function getRandomInt(max) {
  return Math.floor(Math.random() * max);
}

function getRandomHex(param) {
  var encode = Math.floor(Math.random() * 16777215);
  var hex = encode.toString(16);
  return "#" + (String(hex) + "");
}

function Circles(Props) {
  var match = Curry._2(ReasonUrql.Hooks.useSubscription, make(/* () */0), /* Handler */[handler]);
  var response = match[/* response */3];
  if (typeof response === "number") {
    if (response === /* Fetching */0) {
      return React.createElement("text", undefined, "Loading");
    } else {
      return React.createElement("text", undefined, "Not Found");
    }
  } else if (response.tag) {
    return React.createElement("text", undefined, "Error");
  } else {
    var d = response[0];
    return $$Array.mapi((function (index, datum) {
                  var match = index === 0;
                  return React.createElement("circle", {
                              cx: datum.newNumber,
                              cy: match ? datum.newNumber : Caml_array.caml_array_get(d, index - 1 | 0).newNumber,
                              fill: "none",
                              r: String(getRandomInt(30)),
                              stroke: getRandomHex(/* () */0)
                            });
                }), d);
  }
}

var make$1 = Circles;

export {
  SubscribeRandomInt ,
  handler ,
  getRandomInt ,
  getRandomHex ,
  make$1 as make,
  
}
/* react Not a pure module */
